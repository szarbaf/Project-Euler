/* Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
 *
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 *
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
 *
 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
 */

#include <iostream>
#include <unordered_set>
#include <vector>
#include <cmath>

using namespace std;

constexpr long int max_diff_initial_guess = 1e7;

typedef long long int ll;

void GetPantegonalNums(int max_n, vector<ll> &pen_nums, unordered_set<ll> &is_pen_nums){
	pen_nums.reserve(max_n);
	is_pen_nums.reserve(max_n);
  	for (ll c = 1; c < max_n+1; c++){
		ll pen_num = c*(3*c-1)/2;
		pen_nums.push_back(pen_num);
		is_pen_nums.insert(pen_num);
	}
}

bool IsPentagoanlInteresting(ll pen_i, ll pen_j, const unordered_set<ll> &is_pen_nums){
  //cout << "Checking " << pen_i << ", " << pen_j << endl;
  if ( (is_pen_nums.find(pen_j+pen_i) != is_pen_nums.end()) ) {
	//cout << "Found Pentagonal nums " << pen_i << ", " << pen_j << " with pentagonal sum." << endl;
	if ( (is_pen_nums.find(pen_j-pen_i) != is_pen_nums.end()) )
	  return true;
	else
	  return false;
  }
  else
	return false;
}

int main(){

  // Finding the sequence number at which the difference between two consecutive numbers is more than max_diff_initial_guess.
  const int max_n = ceil( (max_diff_initial_guess - 1) / 3.0 );

  // Finding pentagonal numbers frim 1 to max_n
  vector<ll> pen_nums;
  unordered_set<ll> is_pen_nums;
  GetPantegonalNums(max_n, pen_nums, is_pen_nums);

  int max_diff = max_diff_initial_guess;
  for (int i = 0; i < max_n; i++){
  	for (int j = i+1; (j < max_n) && (pen_nums[j]-pen_nums[i] < max_diff) ; j++){
		ll pen_i = pen_nums[i], pen_j = pen_nums[j];
		if (IsPentagoanlInteresting(pen_i, pen_j, is_pen_nums)){
			cout << "Found interesting pentagonal pair " << pen_i << " , " << pen_j << endl;
			if (pen_j-pen_i < max_diff)
			  max_diff = pen_j-pen_i;
		}
	}
  }

  cout << "The smallest difference between interesting Pentagonal pairs is " << max_diff << endl;

  return 0;

}
